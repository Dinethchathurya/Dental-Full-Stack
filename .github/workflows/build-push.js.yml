name: Full-stack CI/CD with Docker Compose

on:
  push:
    branches:
        - main  

jobs:
  # build-and-push:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: true

  #     - name: Set up Docker
  #       uses: docker/setup-buildx-action@v2

  #     - name: Set up Docker Compose
  #       run: |
  #         cd app 
  #         sudo apt-get update


  #     - name: Build backend image
  #       run: docker build -t dental/backend:ci -f app/backend/Dockerfile.prod.yml app/backend

  #     - name: Smoke test container with runtime envs for backend
  #       env:
  #         STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  #         MONGO_URI: ${{ secrets.MONGO_URI }}
  #         NODE_ENV: production
  #         BACKEND_PORT: 9000
  #       run: |
  #         cd app
  #         docker run --rm \
  #           -e STRIPE_SECRET_KEY \
  #           -e MONGO_URI \
  #           -e NODE_ENV \
  #           -e BACKEND_PORT \
  #           -p 9000:9000 \
  #           -d \
  #           dental/backend:ci \

  #   #build front end image
  #     - name: Build Front end image
  #       run: docker build -t dental/frontend:ci -f app/frontend/Dockerfile.nginx.prod.yml app/frontend

  #     - name: Smoke test container with runtime envs for front end
  #       env:
  #         NODE_ENV: production
  #       run: |
  #         cd app
  #         docker run --rm \
  #           -e NODE_ENV \
  #           -p 8080:8080 \
  #           -d \
  #           dental/frontend:ci \

  # # Make names/tags available to later steps
  #     - name: Prepare image names and tags
  #       run: |
  #         USER_LC=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr '[:upper:]' '[:lower:]')
  #         echo "BACKEND_REPO=$USER_LC/dental-backend" >> $GITHUB_ENV
  #         echo "FRONTEND_REPO=$USER_LC/dental-frontend" >> $GITHUB_ENV
  #         echo "SHA_TAG=${GITHUB_SHA::12}" >> $GITHUB_ENV

  #     # Tag both images with :latest and :$SHA_TAG
  #     - name: Tag images
  #       run: |
  #         docker tag dental/backend:ci  $BACKEND_REPO:latest
  #         docker tag dental/backend:ci  $BACKEND_REPO:$SHA_TAG
  #         docker tag dental/frontend:ci $FRONTEND_REPO:latest
  #         docker tag dental/frontend:ci $FRONTEND_REPO:$SHA_TAG

  #         # Debug: list tags weâ€™re about to push
  #         echo "---- local images ----"
  #         docker images --format '{{.Repository}}:{{.Tag}}' | grep -E '(dental-|/dental-)'

  #     # Login & push
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_ACCESS_KEY }}

  #     - name: Push images
  #       run: |
  #         docker push $BACKEND_REPO:latest
  #         docker push $BACKEND_REPO:$SHA_TAG
  #         docker push $FRONTEND_REPO:latest
  #         docker push $FRONTEND_REPO:$SHA_TAG
   
  #   #clean the environment
  #     - name: Cleanup containers/images/volumes
  #       if: always()
  #       run: |
  #         # stop & remove any leftover containers (none if --rm was used)
  #         docker ps -aq | xargs -r docker rm -f

  #         # remove our image explicitly (ignore errors if not present)
  #         docker rmi -f myorg/backend:ci || true

  #         # prune dangling images, networks, and volumes
  #         docker image prune -af || true
  #         docker network prune -f || true
  #         docker volume prune -f || true

  #         # nuke everything dangling (including build cache)
  #         docker system prune -af --volumes || true


  multiarch-publish:
    name: Build & Publish (amd64+arm64)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: backend
            context: app/backend
            file: app/backend/Dockerfile.prod.yml
            repo_suffix: dental-backend
          - name: frontend
            context: app/frontend
            file: app/frontend/Dockerfile.nginx.prod.yml
            repo_suffix: dental-frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (cross-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_KEY }}

      - name: Prepare tags
        run: |
          USER_LC=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr '[:upper:]' '[:lower:]')
          SHORT_SHA=${GITHUB_SHA::12}
          SAFE_REF=$(echo "$GITHUB_REF_NAME" | tr '[:upper:]' '[:lower:]' | tr -c 'a-z0-9_.-' '-')
          echo "USER_LC=$USER_LC" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "SAFE_REF=$SAFE_REF" >> $GITHUB_ENV

      - name: Build & push ${{ matrix.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.USER_LC }}/${{ matrix.repo_suffix }}:latest
            ${{ env.USER_LC }}/${{ matrix.repo_suffix }}:${{ env.SHORT_SHA }}
            ${{ env.USER_LC }}/${{ matrix.repo_suffix }}:${{ env.SAFE_REF }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

